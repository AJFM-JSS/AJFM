from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime
from werkzeug.utils import secure_filename
from config import EMAIL_CONFIG

app = Flask(__name__)
app.secret_key = 'your-secret-key-here'  # Change this in production

# Configuration
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Ensure upload folder exists
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def send_consultation_email(user_email, resume_filename, resume_path):
    """
    Send consultation scheduling email to admin with user details and resume attachment
    """
    try:
        # Create message
        msg = MIMEMultipart()
        msg['From'] = EMAIL_CONFIG['sender_email']
        msg['To'] = EMAIL_CONFIG['admin_email']
        msg['Subject'] = f'New Consultation Request - {user_email}'
        
        # Email body
        body = f"""
        New consultation request received!
        
        User Details:
        - Email: {user_email}
        - Resume: {resume_filename}
        - Submitted: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        
        Please schedule a consultation call with this user.
        Scheduling link: https://zcal.co/jobsimplified/30min
        
        Best regards,
        Apply Boost Studio System
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Attach resume file
        if os.path.exists(resume_path):
            with open(resume_path, 'rb') as attachment:
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(attachment.read())
            
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f'attachment; filename= {resume_filename}'
            )
            msg.attach(part)
        
        # Send email
        server = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'])
        server.starttls()
        server.login(EMAIL_CONFIG['sender_email'], EMAIL_CONFIG['sender_password'])
        text = msg.as_string()
        server.sendmail(EMAIL_CONFIG['sender_email'], EMAIL_CONFIG['admin_email'], text)
        server.quit()
        
        return True
    except Exception as e:
        print(f"Email sending failed: {str(e)}")
        return False

def send_confirmation_email(user_email, resume_filename):
    """
    Send confirmation email to user
    """
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_CONFIG['sender_email']
        msg['To'] = user_email
        msg['Subject'] = 'Consultation Request Received - Apply Boost Studio'
        
        body = f"""
        Thank you for your consultation request!
        
        We have received your resume ({resume_filename}) and will be in touch shortly to schedule your consultation call.
        
        Next Steps:
        1. Our team will review your resume
        2. We'll contact you within 24 hours to schedule your consultation
        3. During the call, we'll discuss your job search goals and how we can help
        
        You can also schedule your consultation directly here:
        https://zcal.co/jobsimplified/30min
        
        If you have any questions, please don't hesitate to reach out.
        
        Best regards,
        The Apply Boost Studio Team
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        server = smtplib.SMTP(EMAIL_CONFIG['smtp_server'], EMAIL_CONFIG['smtp_port'])
        server.starttls()
        server.login(EMAIL_CONFIG['sender_email'], EMAIL_CONFIG['sender_password'])
        text = msg.as_string()
        server.sendmail(EMAIL_CONFIG['sender_email'], user_email, text)
        server.quit()
        
        return True
    except Exception as e:
        print(f"Confirmation email sending failed: {str(e)}")
        return False

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/get-started')
def get_started():
    return render_template('get_started.html')

@app.route('/login')
def login():
    return render_template('login.html')

@app.route('/profile')
def profile():
    return render_template('profile.html')

@app.route('/resume-builder')
def resume_builder():
    return render_template('resume_builder.html')

@app.route('/upload-resume', methods=['POST'])
def upload_resume():
    if 'resume' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    
    file = request.files['resume']
    email = request.form.get('email')
    
    if not email:
        return jsonify({'error': 'Email is required'}), 400
    
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        
        # Send consultation email to admin
        admin_email_sent = send_consultation_email(email, filename, file_path)
        
        # Send confirmation email to user
        user_email_sent = send_confirmation_email(email, filename)
        
        # Log the submission (in production, save to database)
        submission_log = {
            'email': email,
            'resume_filename': filename,
            'submitted_at': datetime.now().isoformat(),
            'admin_email_sent': admin_email_sent,
            'user_email_sent': user_email_sent
        }
        
        print(f"New consultation request: {submission_log}")
        
        return jsonify({
            'success': True,
            'message': f'Consultation request submitted successfully! We have received your resume and will contact you within 24 hours.',
            'redirect_url': 'https://zcal.co/jobsimplified/30min',
            'email_sent': user_email_sent
        })
    
    return jsonify({'error': 'Invalid file type. Please upload PDF, DOC, or DOCX files only.'}), 400

@app.route('/schedule-consultation', methods=['POST'])
def schedule_consultation():
    """
    Handle consultation scheduling with email and resume
    """
    if 'resume' not in request.files:
        return jsonify({'error': 'No resume file provided'}), 400
    
    file = request.files['resume']
    email = request.form.get('email')
    
    if not email:
        return jsonify({'error': 'Email is required'}), 400
    
    if file.filename == '':
        return jsonify({'error': 'No resume file selected'}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        
        # Send consultation email to admin with resume attachment
        admin_email_sent = send_consultation_email(email, filename, file_path)
        
        # Send confirmation email to user
        user_email_sent = send_confirmation_email(email, filename)
        
        # Log the consultation request
        consultation_log = {
            'email': email,
            'resume_filename': filename,
            'submitted_at': datetime.now().isoformat(),
            'admin_email_sent': admin_email_sent,
            'user_email_sent': user_email_sent,
            'action': 'consultation_scheduled'
        }
        
        print(f"Consultation scheduled: {consultation_log}")
        
        return jsonify({
            'success': True,
            'message': 'Your consultation has been scheduled! Check your email for confirmation.',
            'redirect_url': 'https://zcal.co/jobsimplified/30min',
            'email_sent': user_email_sent,
            'consultation_id': f"CONS_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        })
    
    return jsonify({'error': 'Invalid file type. Please upload PDF, DOC, or DOCX files only.'}), 400

@app.route('/api/testimonials')
def get_testimonials():
    testimonials = [
        {
            "name": "Sarah Johnson",
            "role": "Software Engineer",
            "content": "After months of job hunting with no success, AJFM changed everything. Within 3 weeks, I had 4 interview requests and landed a position that exceeded my salary expectations.",
            "rating": 5,
            "image": "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?w=400&h=400&fit=crop&crop=face"
        },
        {
            "name": "Michael Chen",
            "role": "Marketing Manager", 
            "content": "AJFM saved me countless hours of searching and applying. Their team found opportunities I hadn't discovered and handled all the application details perfectly.",
            "rating": 5,
            "image": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face"
        },
        {
            "name": "Emily Rodriguez",
            "role": "Product Manager",
            "content": "As a busy parent, I didn't have time to apply for jobs effectively. AJFM understood my goals and secured multiple interviews within a month.",
            "rating": 5,
            "image": "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face"
        }
    ]
    return jsonify(testimonials)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5001) 