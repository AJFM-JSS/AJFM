name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug secrets (masked)
      run: |
        echo "DOCKER_USERNAME is set: ${{ secrets.DOCKER_USERNAME }}"
        echo "DOCKER_PASSWORD is set: ${{ secrets.DOCKER_PASSWORD  }}"
        echo "EC2_HOST is set: ${{ secrets.EC2_HOST  }}"
        echo "EC2_USERNAME is set: ${{ secrets.EC2_USERNAME  }}"
        echo "EC2_PRIVATE_KEY is set: ${{ secrets.EC2_PRIVATE_KEY }}"
        echo "EC2_PORT is set: ${{ secrets.EC2_PORT  }}"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ajfm:latest
          ${{ secrets.DOCKER_USERNAME }}/ajfm:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # Update system packages
          sudo apt-get update
          
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi
          
          # Install Docker Compose if not already installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Create app directory if it doesn't exist
          mkdir -p /home/${{ secrets.EC2_USERNAME }}/ajfm
          cd /home/${{ secrets.EC2_USERNAME }}/ajfm
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            app:
              image: ${{ secrets.DOCKER_USERNAME }}/ajfm:latest
              container_name: ajfm-app
              ports:
                - "5000:5000"
              environment:
                - FLASK_ENV=production
              restart: unless-stopped
              networks:
                - ajfm-network
              
          networks:
            ajfm-network:
              driver: bridge
          EOF
          
          # Stop and remove existing containers
          docker-compose down || true
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/ajfm:latest
          
          # Start the application
          docker-compose up -d
          
          # Clean up old images
          docker image prune -f 